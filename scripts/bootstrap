#!/usr/bin/env bash

# Dotfiles and bootstrap installer
# Installs git, clones repository and symlinks dotfiles to your home directory

set -e
trap on_error SIGTERM

e='\033'
RESET="${e}[0m"
BOLD="${e}[1m"
CYAN="${e}[0;96m"
RED="${e}[0;91m"
YELLOW="${e}[0;93m"
GREEN="${e}[0;92m"

_exists() {
	command -v "$1" >/dev/null 2>&1
}

# Success reporter
info() {
	echo -e "${CYAN}${*}${RESET}"
}

# Error reporter
error() {
	echo -e "${RED}${*}${RESET}"
}

# Success reporter
success() {
	echo -e "${GREEN}${*}${RESET}"
}

# End section
finish() {
	success "Done!"
	echo
	sleep 1
}

# Set directory
export DOTFILES=${1:-"$HOME/.dotfiles"}
GITHUB_REPO_URL_BASE="https://github.com/Jqnx/dotfiles"
HOMEBREW_INSTALLER_URL="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"

on_start() {
	info "           __        __   ____ _  __           "
	info "      ____/ /____   / /_ / __/(_)/ /___   _____"
	info "     / __  // __ \ / __// /_ / // // _ \ / ___/"
	info "  _ / /_/ // /_/ // /_ / __// // //  __/(__  ) "
	info " (_)\__,_/ \____/ \__//_/  /_//_/ \___//____/  "
	info "                                               "
	info "              by @Jqnx                         "
	info "                                               "

	info "This script will install git, zsh, nvim, dotfiles itself, and some more."
	echo "xdd"
	echo
	read -p "Do you want to proceed with installation? [y/N] " -n 1 answer
	echo
	if [ "${answer}" != "y" ]; then
		exit
	fi
}

update() {
	info "Updating the system..."

	if [ "$(lsb_release -is)" = "Ubuntu" ]; then
		sudo apt update
		sudo apt --fix-broken install -y
		sudo apt upgrade -y
		sudo apt autoremove -y
		sudo apt autoclean -y
	fi

	finish
}

install_homebrew() {
	info "Trying to detect installed Homebrew..."

	if ! _exists brew; then
		#echo "Seems like you don't have Homebrew installed!"
		#read -p "Do you agree to proceed with Homebrew installation? [y/N] " -n 1 answer
		#echo
		#if [ "${answer}" != "y" ]; then
		#	return
		#fi

		info "Installing Homebrew..."
		NONINTERACTIVE=1 bash -c "$(curl -fsSL ${HOMEBREW_INSTALLER_URL})"
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
		source ~/.bashrc
	else
		success "You already have Homebrew installed. Skipping..."
	fi

	finish
}

install_git() {
	info "Trying to detect installed Git..."

	if ! _exists git; then
		echo "Seems like you don't have Git installed!"
		read -p "Do you agree to proceed with Git installation? [y/N] " -n 1 answer
		echo
		if [ "${answer}" != "y" ]; then
			return
		fi

		info "Installing Git..."

		if [ "$(uname)" = "Darwin" ]; then
			brew install git
		elif [ "$(uname)" = "Linux" ]; then
			sudo apt install git -y
		else
			error "Error: Failed to install Git!"
			return
		fi
	else
		success "You already have Git installed. Skipping..."
	fi

	finish
}

install_zsh() {
	info "Trying to detect installed Zsh..."

	if ! _exists zsh; then
		echo "Seems like you don't have Zsh installed!"
		#read -p "Do you agree to proceed with Zsh installation? [y/N] " -n 1 answer
		#echo
		#if [ "${answer}" != "y" ]; then
		#	return
		#fi

		info "Installing Zsh..."

		if [ "$(uname)" = "Darwin" ]; then
			brew install zsh zsh-completions
		elif [ "$(uname)" = "Linux" ]; then
			sudo apt install zsh -y
		else
			error "Error: Failed to install Zsh!"
			return
		fi
	else
		success "You already have Zsh installed. Skipping..."
	fi

	if _exists zsh && [[ -z "$ZSH_VERSION" ]]; then
		info "Setting up Zsh as default shell..."

		sudo chsh -s "$(which zsh)" "$(whoami)" || error "Error: Cannot set Zsh as default shell!"
	fi

	finish
}

install_nvim() {
	info "Trying to detect installed neovim..."

	if ! _exists nvim; then
		echo "Seems like you don't have neovim installed!"
		read -p "Do you agree to proceed with neovim installation? [y/N]" -n 1 answer
		echo
		if [ "$answer" != "y" ]; then
			return
		fi

		info "Installing neovim..."
		if [ "$(lsb_release -is)" = "Ubuntu" ]; then
			sudo apt install software-properties-common
			sudo add-apt-repository --yes ppa:neovim-ppa/unstable
			sudo apt install neovim -y
		fi
	else
		success "You already have neovim installed. Skipping..."
	fi

	finish
}

install_software() {
	info "Installing software..."

	if [ "$(lsb_release -is)" = "Ubuntu" ]; then
		sudo apt install tmux -y
		sudo apt install btop -y
		sudo apt install neofetch -y
		sudo apt install npm -y
		sudo apt install fzf -y
		brew install starship
		brew install jesseduffield/lazygit/lazygit
		#curl -sS https://starship.rs/install.sh | sh

		# Ansible install
		if ! _exists ansible; then
			sudo add-apt-repository --yes --update ppa:ansible/ansible
			sudo apt install ansible -y
		else
			success "You already have ansible installed. Skipping..."
		fi

		# Terraform install
		if ! _exists terraform; then
			wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
			echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
			sudo apt update
			sudo apt install terraform -y
		else
			success "You already have terraform installed. Skipping..."
		fi

		# Vagrant install
		if ! _exists vagrant; then
			sudo apt install vagrant -y
		else
			success "You already have vagrant installed. Skipping..."
		fi

		# Kubectl install
		if ! _exists kubectl; then
			if [ "$(lsb_release -is)" = "Ubuntu" ]; then
				sudo apt install -y apt-transport-https ca-certificates curl
				sudo mkdir /etc/apt/keyrings
				curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
				echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
				sudo apt update
				sudo apt install kubectl -y
			fi
		else
			success "You already have kubectl installed. Skipping..."
		fi

		# Eza install
		if ! _exists eza; then
			wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | sudo gpg --dearmor -o /etc/apt/keyrings/gierens.gpg
			echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list
			sudo apt update
			sudo apt install eza -y
		else
			success "You already have eza installed. Skipping..."
		fi
	fi

	finish
}

on_finish() {
	echo
	success "Setup was successfully done!"
	success "Happy Coding!"
	echo
	echo -ne "$RED"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
	echo -e "$RESET""$BOLD"',------,'"$RESET"
	echo -ne "$YELLOW"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
	echo -e "$RESET""$BOLD"'|   /\_/\\'"$RESET"
	echo -ne "$GREEN"'-_-_-_-_-_-_-_-_-_-_-_-_-_-'
	echo -e "$RESET""$BOLD"'~|__( ^ .^)'"$RESET"
	echo -ne "$CYAN"'-_-_-_-_-_-_-_-_-_-_-_-_-_-_'
	echo -e "$RESET""$BOLD"'""  ""'"$RESET"
	echo
	info "P.S: Don't forget to restart a terminal :)"
	echo
}

on_error() {
	echo
	error "Wow... Something serious happened!"
	error "Though, I don't know what really happened :("
	error "In case, you want to help me fix this problem, raise an issue -> ${CYAN}${GITHUB_REPO_URL_BASE}issues/new${RESET}"
	echo
	exit 1
}

main() {
	echo "Before we proceed, please type your sudo password:"
	sudo -v

	on_start "$*"
	update "$*"
	install_homebrew "$*"
	install_git "$*"
	install_zsh "$*"
	install_nvim "$*"
	install_software "$*"
	on_finish "$*"
}

main "$*"
